"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShapePositionEnum = exports.ShapePositions = void 0;
class ShapePositions {
    constructor(position) {
        this.position = position;
    }
}
exports.ShapePositions = ShapePositions;
exports.ShapePositionEnum = {
    PERFECT_CUBE: new ShapePositions([
        -1.0, -1.0, +1.0, +1.0, -1.0, +1.0, +1.0, +1.0, +1.0, -1.0, +1.0, +1.0, // Front face
        -1.0, -1.0, -1.0, -1.0, +1.0, -1.0, +1.0, +1.0, -1.0, +1.0, -1.0, -1.0, // Back face
        -1.0, +1.0, -1.0, -1.0, +1.0, +1.0, +1.0, +1.0, +1.0, +1.0, +1.0, -1.0, // Top face
        -1.0, -1.0, -1.0, +1.0, -1.0, -1.0, +1.0, -1.0, +1.0, -1.0, -1.0, +1.0, // Bottom face
        +1.0, -1.0, -1.0, +1.0, +1.0, -1.0, +1.0, +1.0, +1.0, +1.0, -1.0, +1.0, // Right face
        -1.0, -1.0, -1.0, -1.0, -1.0, +1.0, -1.0, +1.0, +1.0, -1.0, +1.0, -1.0, // Left face
    ]),
    RECTANGLE: new ShapePositions([
        -1.0, +0.0, +1.0, -0.5, +0.0, +1.0, -0.5, +1.0, +1.0, -1.0, +1.0, +1.0, // Front face
        -1.0, +0.0, -1.0, -1.0, +1.0, -1.0, -0.5, +1.0, -1.0, -0.5, +0.0, -1.0, // Back face
        -1.0, +1.0, -1.0, -1.0, +1.0, +1.0, -0.5, +1.0, +1.0, -0.5, +1.0, -1.0, // Top face
        -1.0, +0.0, -1.0, -0.5, +0.0, -1.0, -0.5, +0.0, +1.0, -1.0, +0.0, +1.0, // Bottom face
        -0.5, +0.0, -1.0, -0.5, +1.0, -1.0, -0.5, +1.0, +1.0, -0.5, +0.0, +1.0, // Right face
        -1.0, +0.0, -1.0, -1.0, +0.0, +1.0, -1.0, +1.0, +1.0, -1.0, +1.0, -1.0, // Left face
    ]),
    ALMOST_PYRAMID: new ShapePositions([
        -1.0, -1.0, -1.0, +1.0, -1.0, -1.0, +1.0, -1.0, +1.0, -1.0, -1.0, +1.0, // Base
        -1.0, -1.0, -1.0, +1.0, -1.0, -1.0, +0.0, +1.0, +0.0, // Front face
        +1.0, -1.0, -1.0, +1.0, -1.0, +1.0, +0.0, +1.0, +0.0, // Right face
        +1.0, -1.0, +1.0, -1.0, -1.0, +1.0, +0.0, +1.0, +0.0, // Back face
        -1.0, -1.0, +1.0, -1.0, -1.0, -1.0, +0.0, +1.0, +0.0, // Left face
    ]),
    BERRY: new ShapePositions([
        -1.0, -2.0, +2.0, +1.0, -1.0, +2.0, +2.0, +1.0, +1.0, -3.0, +1.0, +0.0, // Front face
        -2.0, +0.0, +1.0, -1.0, +0.0, +1.0, -1.0, +2.0, +1.0, -2.0, +2.0, +1.0, // Back face
        -2.0, +2.0, -1.0, -2.0, +2.0, +1.0, -1.0, +2.0, +1.0, -1.0, +2.0, -1.0, // Top face
        -1.0, -1.0, -1.0, +1.0, -1.0, -1.0, +1.0, -1.0, +1.0, -1.0, -1.0, +1.0, // Bottom face
        +1.0, -1.0, -1.0, +1.0, +1.0, -1.0, +1.0, +1.0, +1.0, +1.0, -1.0, +1.0, // Right face
        -1.0, -1.0, -1.0, -1.0, -1.0, +1.0, -1.0, +1.0, +1.0, -1.0, +1.0, -1.0, // Left face
    ]),
    JERRY: new ShapePositions([
        -1.0, -1.0, -1.0, +1.0, -1.0, -1.0, +0.0, +1.0, +0.0, // Front face
        +1.0, -1.0, -1.0, +1.0, -1.0, +1.0, +0.0, +1.0, +0.0, // Right face
        +1.0, -1.0, +1.0, -1.0, -1.0, +1.0, +0.0, +1.0, +0.0, // Back face
        -1.0, -1.0, +1.0, -1.0, -1.0, -1.0, +0.0, +1.0, +0.0, // Left face
    ]),
    TERRY: new ShapePositions([
        -2.0, +0.0, +1.0, -1.0, +0.0, +1.0, -1.0, +2.0, +1.0, -2.0, +2.0, +1.0, // Front face
        -2.0, +0.0, -1.0, -2.0, +2.0, -1.0, -1.0, +2.0, -1.0, -1.0, +0.0, -1.0, // Back face
        -2.0, +2.0, -1.0, -2.0, +2.0, +1.0, -1.0, +2.0, +1.0, -1.0, +2.0, -1.0, // Top face
        -1.0, -1.0, -1.0, +1.0, -1.0, -1.0, +1.0, -1.0, +1.0, -1.0, -1.0, +1.0, // Bottom face
        +3.0, -1.0, -1.0, +1.0, +1.0, -1.0, +1.0, +1.0, +1.0, +1.0, -1.0, +1.0, // Right face
        -1.0, -1.0, -1.0, -1.0, -1.0, +1.0, -1.0, +1.0, +1.0, -1.0, +1.0, -1.0, // Left face
    ])
};
